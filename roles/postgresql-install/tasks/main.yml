### Install PostgreSQL packages

# make sure an old version of PostgreSQL is absent
#   ignore warnings about using yum instead of rpm;
#   yum can not be used here because it would also erase postgresql11-libs if presented
#   so it would be always "changed"
- name: uninstall old version of PostgreSQL
  shell: rpm -e postgresql-libs
  register: rpm_rc
  changed_when: rpm_rc.rc == 0
  failed_when: false

- name: make sure the minor revision of PostgreSQL
  set_fact:
    pg_rev: '15.8-1PGDG'
  when: pg_rev is not defined
- name: extract major version number of PostgreSQL
  set_fact:
    pg_major: "{{ pg_rev | regex_replace('^(\\d*)\\..*', '\\1') }}"
- name: make sure pg_rev format is valid
  fail:
    msg: |
      'pg_rev' format must look like '15.8-1PGDG.rhel8'
      Hint - the format has been changed so that it must contains rhel revision
  when: '"rhel" not in pg_rev'


- name: copy PostgreSQL packages to the node
  copy:
    src="{{ item }}"
    dest="/var/tmp/"
  with_items:
      # the order is significant - as each rpms will be installed in this order
      - postgresql{{ pg_major }}-libs-{{ pg_rev }}.x86_64.rpm
      - postgresql{{ pg_major }}-{{ pg_rev }}.x86_64.rpm
      - postgresql{{ pg_major }}-server-{{ pg_rev }}.x86_64.rpm
      - postgresql{{ pg_major }}-docs-{{ pg_rev }}.x86_64.rpm
      - postgresql{{ pg_major }}-contrib-{{ pg_rev }}.x86_64.rpm
  register: rc_copy

- name: install PostgreSQL packages
  yum:
    name: "{{ item.dest | default(item.path) }}"
    update_cache: yes
    disable_gpg_check: True
    state: present
  with_items: "{{ rc_copy.results }}"
  loop_control:
    label: "{{ item.dest | default(item.path) }}" # to suppress too verbose logs

### Setup postgres user's environment
- name: add PATH to postgres user environment
  become: yes
  become_user: postgres
  lineinfile:
    dest="/var/lib/pgsql/.pgsql_profile"
    regexp="^export PATH=/usr/pgsql-{{ pg_major }}/bin:\$PATH"
    line="export PATH=/usr/pgsql-{{ pg_major }}/bin:$PATH"
    state=present
    create=yes

- name: add PGDATA to postgres user environment
  become: yes
  become_user: postgres
  lineinfile:
    dest="/var/lib/pgsql/.pgsql_profile"
    regexp="^export PGDATA="
    line="export PGDATA={{ PGDATA }}"
    state=present

